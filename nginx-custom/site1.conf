# #code temporaire
# server {
#     listen 80;
#     #listen [::]:80;
#     server_name srv546916.hstgr.cloud;
#
#     # Emplacement pour servir les fichiers de validation de Certbot
#     location /.well-known/acme-challenge/ {
#         root /var/www/certbot;  # Chemin où Certbot placera les fichiers de validation
#         #try_files $uri =404;
#     }
#
#     # Proxy vers le conteneur `frontend` qui sert l'application Angular
#     location / {
#         proxy_pass http://frontend;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#     }
#
#     # Requêtes vers l'API backend
#     location /api/ {
#         proxy_pass http://backend:3001;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#
#         # Ajouter les en-têtes CORS pour toutes les requêtes
#         add_header 'Access-Control-Allow-Origin' 'http://site1.srv546916.hstgr.cloud' always;
#         add_header 'Access-Control-Allow-Credentials' 'true' always;
#         add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
#         add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin' always;
#
#         # Réponse spécifique pour les requêtes OPTIONS (pré-vol)
#         if ($request_method = OPTIONS) {
#             return 204;
#         }
#     }
#
#     # Logs
#     error_log /var/log/nginx/site1.error.log;
#     access_log /var/log/nginx/site1.access.log;
# }
#####

server {
    listen 80;
    server_name site1.srv546916.hstgr.cloud;

    # Emplacement pour servir les fichiers de validation de Certbot
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;  # Chemin où Certbot placera les fichiers de validation
    try_files $uri =404;
    }

    # Rediriger toutes les autres requêtes HTTP vers HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name site1.srv546916.hstgr.cloud;

     ssl_certificate /etc/letsencrypt/live/srv546916.hstgr.cloud/fullchain.pem;
     ssl_certificate_key /etc/letsencrypt/live/srv546916.hstgr.cloud/privkey.pem;
     ssl_protocols TLSv1.2 TLSv1.3;
     ssl_ciphers HIGH:!aNULL:!MD5;

    # En-têtes de sécurité supplémentaires
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";

    # Proxy vers le conteneur `frontend` qui sert l'application Angular
    location / {
        proxy_pass http://frontend:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Requêtes vers l'API backend
    location /api/ {
        proxy_pass http://backend:3001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Ajouter les en-têtes CORS pour toutes les requêtes
        add_header 'Access-Control-Allow-Origin' 'http://site1.srv546916.hstgr.cloud' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin' always;

        # Réponse spécifique pour les requêtes OPTIONS (pré-vol)
        if ($request_method = OPTIONS) {
            return 204;
        }
    }

    # Logs
    error_log /var/log/nginx/site1.error.log;
    access_log /var/log/nginx/site1.access.log;
}